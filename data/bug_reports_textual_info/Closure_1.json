{
    "id": 253,
    "status": "Fixed",
    "summary": "function arguments should not be optimized away",
    "labels": [
        "Type-Defect",
        "Priority-Medium"
    ],
    "stars": 5,
    "commentCount": 7,
    "comments": [
        {
            "id": 0,
            "commenterId": -3903643841053596160,
            "content": "Function arguments should not be optimized away, as this comprimizes the function's length property.\r\n\r\n<b>What steps will reproduce the problem?</b>\n\r\n// ==ClosureCompiler==\r\n// @compilation_level SIMPLE_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// ==/ClosureCompiler==\r\nfunction foo (bar, baz) {\r\n  return bar;\r\n}\r\nalert (foo.length);\r\nfunction foo (bar, baz) {\r\n  return bar;\r\n}\r\nalert (foo.length);\r\n\r\n--------------------------------------\r\n\r\nWhat is the expected output?\r\n\r\nfunction foo(a,b){return a}alert(foo.length);\r\n\r\n--------------------------------------\r\n\r\nWhat do you see instead?\r\n\r\nfunction foo(a){return a}alert(foo.length);\r\n\r\n--------------------------------------\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\n\r\nI'm using the product from the web page http://closure-compiler.appspot.com/home\r\n\r\nI'm using Firefox 3.6.10 on Ubuntu 10.0.4\r\n\r\n<b>Please provide any additional information below.</b>\n\r\nThe function's length property is essential to many techniques, such as currying functions.",
            "timestamp": 1285548714,
            "attachments": []
        },
        {
            "id": 1,
            "commenterId": 6454800031398885070,
            "content": "This kind of reflection is generally not supported by the compiler as evident by its restrictions imposed on eval:  \r\n\r\nhttp://code.google.com/closure/compiler/docs/limitations.html\r\n\r\nIn the general case, referring to length on anything other than named function expression is not safe:\r\n\r\nfunction f(a,b,c) {return f.length};\r\nconsole.info( f() );\r\nvar g = f;\r\nf = function(a) {};\r\nconsole.info( g() );\r\n\r\nFor a named function expression the could replace the length with a constant even in simple mode (although it doesn't currently):\r\n\r\nvar f = function me(a,b,c){ return me.length() };\r\n\r\ncould then be transformed to (after unused variable removal):\r\n\r\nvar f = function() {return 3};\r\n\r\n\r\n",
            "timestamp": 1285602266,
            "attachments": []
        },
        {
            "id": 2,
            "commenterId": -3903643841053596160,
            "content": "Pardon my initial post. I accidentally doubled the code. Should have been:\r\n\r\nfunction foo (bar, baz) {\r\n  return bar;\r\n}\r\nalert (foo.length);\r\n\r\n\r\nI don't think this changes your response to the issue though, but who knows. I fail to see how restrictions on eval is relevant to this issue, given one is working with SIMPLE_OPTIMIZATIONS. Given the description for ADVANCED_OPTIMIZATIONS, I can understand removal of (usually) extraneous function parameters.\r\n\r\nIf this issue does not get solved (via directly fixing the issue or allowing annotations for it or whatnot), it should be documented in the SIMPLE_OPTIMIZATIONS section on your limitations page. As it stands, the SIMPLE_OPTIMIZATIONS section gives no clue that it may remove parameters.",
            "timestamp": 1285651504,
            "attachments": []
        },
        {
            "id": 3,
            "commenterId": -3903643841053596160,
            "content": "For those who want to see (IMO) a convincing use of Function.prototype.length, see the following page:\r\n\r\nhttp://www.codingforums.com/showpost.php?p=683518&postcount=1",
            "timestamp": 1285651845,
            "attachments": []
        },
        {
            "id": 4,
            "commenterId": 1019128733661488914,
            "content": "Ocamljs, which translates JavaScript code from OCaml code, also suffers from this issue.\r\nThis optimization spoil the code generated by ocamljs.\r\nThe code generated by ocamljs depends function's length property for currying purpose   (i.e. it occurs everywhere in code), like as  thomaseding puts above.\r\n",
            "timestamp": 1288235149,
            "attachments": []
        },
        {
            "id": 5,
            "commenterId": 1019128733661488914,
            "content": "For my purpose, it is enough to remove the following lines\r\n\r\n-    for (Scope fnScope : allFunctionScopes) {\r\n-      removeUnreferencedFunctionArgs(fnScope);\r\n-    }\r\n\r\nfrom src/com/google/javascript/jscomp/RemoveUnusedVars.java .\r\n\r\n-- Cheers, Keigo",
            "timestamp": 1288236131,
            "attachments": []
        },
        {
            "id": 6,
            "commenterId": -7699928860083865744,
            "content": "This issue was closed by revision r2441.",
            "timestamp": 1357595930,
            "attachments": []
        }
    ]
}