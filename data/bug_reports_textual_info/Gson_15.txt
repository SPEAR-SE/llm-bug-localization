

In lenient mode, JsonWriter#value(java.lang.Number) can write pseudo-numeric values like NaN, Infinity, -Infinity:
    if (!lenient
        && (string.equals("-Infinity") || string.equals("Infinity") || string.equals("NaN"))) {
      throw new IllegalArgumentException("Numeric values must be finite, but was " + value);
    }
But JsonWriter#value(double) behaves in different way:
    if (Double.isNaN(value) || Double.isInfinite(value)) {
      throw new IllegalArgumentException("Numeric values must be finite, but was " + value);
    }
So, while working with streaming, it's impossible to write semi-numeric value without boxing a double (e. g. out.value((Number) Double.valueOf(Double.NaN))).
I think, this should be possible, because boxing gives worse performance.



Can you create a Pull Request with a JUnit test that fails? Even better would be a fix that makes the test pass. Thanks.

