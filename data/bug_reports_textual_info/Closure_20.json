{
    "id": 759,
    "status": "Fixed",
    "summary": "String conversion optimization is incorrect",
    "labels": [
        "Type-Defect",
        "Priority-Medium"
    ],
    "stars": 0,
    "commentCount": 11,
    "comments": [
        {
            "id": 0,
            "commenterId": 592303861180311351,
            "content": "<b>What steps will reproduce the problem?</b>\n\r\nvar f = {\r\n  valueOf: function() { return undefined; }\r\n}\r\nString(f)\r\n\r\n<b>What is the expected output? What do you see instead?</b>\n\r\nExpected output: &quot;[object Object]&quot;\r\nActual output: &quot;undefined&quot;\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\n\r\nAll versions (http://closure-compiler.appspot.com/ as well).\r\n\r\n<b>Please provide any additional information below.</b>\n\r\nThe compiler optimizes String(x) calls by replacing them with x + ''. This is correct in most cases, but incorrect in corner cases like the one mentioned above.",
            "timestamp": 1340115236,
            "attachments": []
        },
        {
            "id": 1,
            "commenterId": 2141497437336661090,
            "content": "The code sample violates the assumption \"Standard methods on Object,\r\nArray, String, Number and Boolean have not be redefined in a way that\r\nbreaks the original contract\" [1].\r\n\r\n[1] http://code.google.com/p/closure-compiler/wiki/CompilerAssumptions",
            "timestamp": 1340179971,
            "attachments": []
        },
        {
            "id": 2,
            "commenterId": 8173196008570380122,
            "content": "It's not actually breaking the valueOf contract: it takes no arguments, returns a string and has no side effects. It just looks like that the assumption the compiler currently makes:\r\n\r\nString(Foo) = Foo + ''\r\n\r\nisn't always valid. The question remains, how high of a priority is such a case?",
            "timestamp": 1340223402,
            "attachments": []
        },
        {
            "id": 3,
            "commenterId": 2141497437336661090,
            "content": "The valueOf method from the code sample does not return a String value\r\nbut an undefined value (unless another assumption is violated).\r\n\r\nWhat is being understood as the contract here? The specification reads:\r\n\r\n1. The object initialiser creates \"a new object as if by the expression\r\n   new Object() where Object is the standard built-in constructor with\r\n   that name\".\r\n   http://ecma-international.org/ecma-262/5.1/#sec-11.1.5\r\n2. When called with no arguments, the Object constructor returns a\r\n   \"native ECMAScript object\".\r\n   http://ecma-international.org/ecma-262/5.1/#sec-15.2.2.1\r\n3. Object.prototype.valueOf returns the \"result of calling ToObject\r\n   passing the this value as the argument\" since the this value is not\r\n   a host object.\r\n   http://ecma-international.org/ecma-262/5.1/#sec-15.2.4.4\r\n4. When the abstract operation ToObject is called with an argument of\r\n   the type Object, the \"result is the input argument\" [4] (i.e. the\r\n   constructed native ECMAScript object).\r\n   http://ecma-international.org/ecma-262/5.1/#sec-9.9\r\n\r\nIt could thereby be concluded that when it comes to the code sample,\r\nthe valueOf should return the initialised object.\r\n\r\nvar f = {};\r\nf.valueOf = function() {\r\n  return f;\r\n};\r\nString(f);\r\n\r\nThis returns \"[object Object]\".\r\n\r\nThe Closure Compiler transforms this program into\r\n\r\nvar f={valueOf:function(){return f}};\"\"+f;\r\n\r\nwhich also returns \"[object Object]\".",
            "timestamp": 1340231811,
            "attachments": []
        },
        {
            "id": 4,
            "commenterId": -7699928860083865744,
            "content": "+1 for getting rid of this \"optimization\". It doesn't really help, and is wrong.",
            "timestamp": 1340245847,
            "attachments": []
        },
        {
            "id": 5,
            "commenterId": -7699928860083865744,
            "content": "",
            "timestamp": 1340312458,
            "attachments": []
        },
        {
            "id": 6,
            "commenterId": 1328304962299559429,
            "content": "This issue was closed by revision r2061.",
            "timestamp": 1340379538,
            "attachments": []
        },
        {
            "id": 7,
            "commenterId": 1328304962299559429,
            "content": "This issue was closed by revision r2061.",
            "timestamp": 1340379784,
            "attachments": []
        },
        {
            "id": 8,
            "commenterId": 1328304962299559429,
            "content": "This issue was closed by revision r2061.",
            "timestamp": 1340380026,
            "attachments": []
        },
        {
            "id": 9,
            "commenterId": 1328304962299559429,
            "content": "This issue was closed by revision r2061.",
            "timestamp": 1340380268,
            "attachments": []
        },
        {
            "id": 10,
            "commenterId": 1328304962299559429,
            "content": "This issue was closed by revision r2061.",
            "timestamp": 1340380512,
            "attachments": []
        }
    ]
}