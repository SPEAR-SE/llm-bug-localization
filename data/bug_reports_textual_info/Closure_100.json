{
    "id": 144,
    "status": "Fixed",
    "summary": "Only assignment to \"this\" issues a \"dangerous use of the global this object\" warning.",
    "labels": [
        "Type-Defect",
        "Priority-Medium"
    ],
    "stars": 1,
    "commentCount": 5,
    "comments": [
        {
            "id": 0,
            "commenterId": -8565359677229908361,
            "content": "<b>What steps will reproduce the problem?</b>\n1. Compile this:\r\n//////////////////////////////////////////\r\n// ==ClosureCompiler==\r\n// @compilation_level ADVANCED_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// ==/ClosureCompiler==\r\n\r\n/** @constructor */\r\nfunction Foo()\r\n{\r\n    this._bar = null;\r\n};\r\n\r\n/** @this {Foo} */\r\nfunction writeMethodWithAnnotation()\r\n{\r\n   this._bar = 123; // no warning. ok\r\n}\r\n\r\n/** @this {Foo} */\r\nfunction readMethodWithAnnotation()\r\n{\r\n   return this._bar; // no warning. ok\r\n}\r\n\r\n//----\r\n\r\nfunction writeMethodWithoutAnnotation()\r\n{\r\n   this._bar = 123; // warning. ok.\r\n}\r\n\r\nfunction readMethodWithoutAnnotation()\r\n{\r\n   return this._bar; // &lt;- No warning!\r\n}\r\n//////////////////////////////////////////\r\n\r\n<b>What is the expected output? What do you see instead?</b>\n- Should get two &quot;dangerous use of the global this object&quot; warnings in the \r\nreadMethodWithAnnotation and writeMethodWithoutAnnotation functions.\r\n- Only writeMethodWithoutAnnotation warns.\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\nBoth 20100330 and online compiler.\r\n\r\n<b>Please provide any additional information below.</b>\nref: http://code.google.com/closure/compiler/docs/js-for-compiler.html \r\n&quot;To prevent compiler warnings, you must use a @this annotation whenever \r\nthis appears in a function that is neither a prototype method nor a \r\nfunction marked as a @constructor.&quot;\r\n\r\nThis also means the example code in the docs won't trig a warning.\r\n-----\r\n/**\r\n * Returns the roster widget element.\r\n * @this {Widget} &lt;-- currently this doesn't matter\r\n * @return {Element}\r\n */\r\nfunction() {\r\n  return this.getComponent().getElement();\r\n});\r\n------\r\n\r\n// Fredrik",
            "timestamp": 1271077130,
            "attachments": []
        },
        {
            "id": 1,
            "commenterId": -7699928860083865744,
            "content": "thanks for the report. i think this may have been deliberate, but i don't remember why \r\nat the moment. it seems wrong now that you mention it. i'll take a look and report \r\nback.",
            "timestamp": 1271132657,
            "attachments": []
        },
        {
            "id": 2,
            "commenterId": -8565359677229908361,
            "content": "Great. Worth noting might be that the title is slightly misleading, it isn't actually \r\nrestricted to direct assignment to \"this\". Rather anything that \"looks like\" assignment \r\nwith \"this\" appearing in the LHS triggers the warning. \r\n\r\nfunction test()\r\n{\r\n   // multi-level test\r\n   this.asdf().asdf().x = 123; // warns. ok\r\n   return this.asdf().asdf().x; // No warning (similar to the widget example in docs)\r\n}\r\n",
            "timestamp": 1271163802,
            "attachments": []
        },
        {
            "id": 3,
            "commenterId": -7699928860083865744,
            "content": "the problem is that we *do* want to allow things like:\r\n\r\nfunction createGetter() {\r\n  return function() { return this; };\r\n}\r\n\r\nwithout special annotation.\r\n\r\ni think the new heuristic should probably be something like \"warn if a property of \r\nthis is being assigned or accessed\"",
            "timestamp": 1274901878,
            "attachments": []
        },
        {
            "id": 4,
            "commenterId": -7699928860083865744,
            "content": "fixed in r234",
            "timestamp": 1275025557,
            "attachments": []
        }
    ]
}