{
    "id": 772,
    "status": "Fixed",
    "summary": "JSCompiler does not recursively resolve typedefs",
    "labels": [
        "Type-Defect",
        "Priority-Medium"
    ],
    "stars": 0,
    "commentCount": 6,
    "comments": [
        {
            "id": 0,
            "commenterId": 1197285801394374144,
            "content": "goog.provide('a.b.c');\r\n\r\ngoog.scope(function() {\r\nvar b = a.b;\r\nvar c = b.c;\r\n\r\n/** @typedef {string} */\r\nc.MyType;\r\n\r\n/** @param {c.MyType} x The variable. */\r\nc.myFunc = function(x) {};\r\n\r\n});\r\n\r\nresults in a compiler error.\r\n\r\ngiven that JSCompiler *does* recursively resolve other names, this appears to be a bug rather than an intended limitation.\r\n",
            "timestamp": 1341588386,
            "attachments": []
        },
        {
            "id": 1,
            "commenterId": 8173196008570380122,
            "content": "I'm fairly certain that typedefs have to be in the global scope. Although I'm not sure that has been documented anywhere or is the intent.\r\n\r\nIf you remove the goog.scope wrapper, your code compiles correctly.",
            "timestamp": 1341590139,
            "attachments": []
        },
        {
            "id": 2,
            "commenterId": 1197285801394374144,
            "content": "no, typedefs don't have to be in the global scope. goog.scope must enclose everything in the file except goog.provide/goog.require",
            "timestamp": 1341590346,
            "attachments": []
        },
        {
            "id": 3,
            "commenterId": 8173196008570380122,
            "content": "Scope affects it in some way. Here's test code:\r\n\r\nvar foo = {};\r\n/** @typedef {string} */\r\nfoo.bar;\r\n\r\n/** @typedef {string} */\r\nvar foo2;\r\n\r\nvar foo3 = {};\r\n\r\n(function() {\r\n\r\n/** @typedef {string} */\r\nfoo3.bar;\r\n/** @typedef {string} */\r\nvar foo4;\r\n\r\nvar foo5 = {};\r\n/** @typedef {string} */\r\nfoo5.bar;\r\n\r\n/** @param {foo.bar} x The variable. */\r\nvar myFunc = function(x) {}; // No errors\r\n\r\n/** @param {foo2} x The variable. */\r\nvar myFunc2 = function(x) {}; // No errors\r\n\r\n/** @param {foo3.bar} x The variable. */\r\nvar myFunc3 = function(x) {}; // Unknown type error\r\n\r\n/** @param {foo4} x The variable. */\r\nvar myFunc4 = function(x) {}; // Unknown type error\r\n\r\n/** @param {foo5.bar} x The variable. */\r\nvar myFunc5 = function(x) {}; // Unknown type error\r\n})();",
            "timestamp": 1341592248,
            "attachments": []
        },
        {
            "id": 4,
            "commenterId": -7699928860083865744,
            "content": "for the record, the error message is:\r\nJSC_TYPE_PARSE_ERROR: Bad type annotation. Unknown type c.MyType at line 10 character 12\r\n/** @param {c.MyType} x The variable. */\r\n",
            "timestamp": 1341702258,
            "attachments": []
        },
        {
            "id": 5,
            "commenterId": -7699928860083865744,
            "content": "This issue was closed by revision r2077.",
            "timestamp": 1341869432,
            "attachments": []
        }
    ]
}