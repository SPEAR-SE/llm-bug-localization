

(note: related to FasterXML/jackson-annotations#56)
For some use cases (one known case being use from ORM like Hibernate) it makes sense to allow use of null (or missing) Object Id, in cases where actual Id will be generated by something other than Jackson. It may also make sense to add matching DeserializationFeature which allows such a condition to either be acceptable (default), or not (throw an exception), to allow for strict checks in cases where null/missing Object Id is not a legal use case.



Looks like missing Object id was acceptable already, as per tests.



In the ObjectIdValueProperty class, the check you added to the deserializeSetAndReturn function:
if (id == null) {
    return null;
}

Is positioned after the Object id = _valueDeserializer.deserialize(p, ctxt);.
Could it be that it should be positioned before the deserialization? If we don't change it, we have exceptions like this one:
JsonMappingException: Can not deserialize instance of java.lang.String out of VALUE_NULL
when we send a JSON with a null id, with this annotation:
JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
Or are we simply doing something wrong here?
Thanks

