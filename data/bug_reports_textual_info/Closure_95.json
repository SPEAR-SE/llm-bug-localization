{
    "id": 66,
    "status": "Fixed",
    "summary": "Use @public tag to prevent compression of symbol names",
    "labels": [
        "Type-Enhancement",
        "Priority-Medium"
    ],
    "stars": 16,
    "commentCount": 10,
    "comments": [
        {
            "id": 0,
            "commenterId": -1159439767172192596,
            "content": "Given this input code:\r\n\r\n\tGlow = {};\r\n\t/** @public */ Glow.versions = [1,2,3];\r\n\tGlow.showVersions = function() { alert(Glow.versions); }\r\n\t\r\n\t// exports\r\n\twindow['Glow'] = Glow;\r\n\tGlow['versions'] = Glow.versions;\r\n\tGlow['showVersions'] = Glow.showVersions;\r\n\r\nThe compiler (with ADVANCED_OPTIMIZATIONS on) will produce the following\r\noutput code:\r\n\r\n\tGlow = {};\r\n\tGlow.a = [1, 2, 3];\r\n\tGlow.b = function() { alert(Glow.a) };\r\n\twindow.Glow = Glow;\r\n\tGlow.versions = Glow.a;\r\n\tGlow.showVersions = Glow.b\r\n\r\nFrom outside the Glow library, a user may do the following (in their own,\r\nuncompressed code):\r\n\r\n\tGlow.versions = [4,5,6];\r\n\tGlow.showVersions();\r\n\r\nOnly in the compiled code will the user-code produces &quot;1,2,3&quot; instead of\r\nthe expected &quot;4,5,6&quot;. This is because the compiler renamed the reference to\r\n[1,2,3] in `showVersions()` to &quot;Glow.a&quot;, whilst the user assigned a new\r\narray to &quot;Glow.versions&quot;, and therefore the two different names now refer\r\nto two different arrays.\r\n\r\nI can avoid this by using the stringy-name to refer to Glow[&quot;versions&quot;],\r\nbut I would then have to do that everywhere in my code which is a annoying\r\nand bug-prone (if I or someone else should ever forget). I'd prefer to tell\r\nthe compiler once about my wish to have a property name left uncompresed,\r\nrather than relying on a side effect (the fact that the compiler won't\r\ncompress stringy-named properties) and then having to invoke that\r\nside-effect consistently everywhere.\r\n\r\nInstead I'm requesting that when the compiler sees a property is marked by\r\nthe author as @public it should then leave that name uncompressed everywhere.\r\n\r\nSo, given the input code above, the desired output would be:\r\n\r\n\tGlow = {};\r\n\tGlow.versions = [1, 2, 3];\r\n\tGlow.b = function() { alert(Glow.versions) };\r\n\twindow.Glow = Glow;\r\n\tGlow.versions = Glow.versions; // not needed now\r\n\tGlow.showVersions = Glow.b\r\n\r\nI'm not fixed on a particular tag, but @public seems an obvious choice, and\r\nI'd prefer to use tags that already exist in JsDoc Toolkit.\r\n\r\nNote that my proposed feature is different than the `@export Glow.versions`\r\ntag proposal, as that tag would merely be a shortcut for &quot;Glow['versions']\r\n= Glow.versions;&quot;, which, as I've shown above, doesn't solve this problem.\r\n",
            "timestamp": 1259927868,
            "attachments": []
        },
        {
            "id": 1,
            "commenterId": -5060162230523776870,
            "content": "",
            "timestamp": 1259954357,
            "attachments": []
        },
        {
            "id": 2,
            "commenterId": -5060162230523776870,
            "content": "The work-around is to use a setter:\r\n\r\nGlow.setVersions(acceptedVersions) {\r\n  Glow.versions = acceptedVersions; \r\n}\r\n\r\nwindow['Glow']['setVersions'] = Glow.setVersions;",
            "timestamp": 1259970321,
            "attachments": []
        },
        {
            "id": 3,
            "commenterId": -1159439767172192596,
            "content": "Adding setters (and getters) for every property we want to expose is *a* workaround, but it's hardly better \r\nthan referring to them with strings internally; I'd say it's worse actually because it alters our public API \r\nand makes everything slower in the process. I appreciate the suggestion but it was one we already \r\nconsidered and rejected.",
            "timestamp": 1259971711,
            "attachments": []
        },
        {
            "id": 4,
            "commenterId": -8179721087999783494,
            "content": "Perhaps another potential workaround is to compile with an \"externs\" file telling the \r\ncompiler that Glow.versions should never be touched:\r\n\r\n[root@pal iplayer-utils]# cat glow2.js\r\nGlow.versions = [4,5,6];\r\nGlow.showVersions();\r\n[root@pal iplayer-utils]# java -jar lib/compiler.jar --compilation_level \r\nADVANCED_OPTIMIZATIONS --formatting PRETTY_PRINT --js glow2.js\r\nGlow.b = [4, 5, 6];\r\nGlow.a();\r\n[root@pal iplayer-utils]# cat e.js\r\nvar Glow = { versions: null, showVersions: null };\r\n[root@pal iplayer-utils]# java -jar lib/compiler.jar --compilation_level \r\nADVANCED_OPTIMIZATIONS --externs e.js --formatting PRETTY_PRINT --js glow2.js\r\nGlow.versions = [4, 5, 6];\r\nGlow.showVersions();",
            "timestamp": 1266948579,
            "attachments": []
        },
        {
            "id": 5,
            "commenterId": 4017014494417519328,
            "content": "I second this feature request and for me it is the most crucial feature enhancement I\r\ncan currently think of. The lack of a @public annotation currently prevents me from\r\nusing advanced optimizations at all because using stringy-named properties everywhere\r\nisn't an option because it makes the code much less readable.\r\n\r\n@micmath: Setters are NOT an option because then you have the same problem with the\r\nsetters. The compiler creates an alias for the setter. This alias is used internally.\r\nWhen you do some inheritance now and override the setter then third-party code is\r\nusing the new setter but internally the old setter is still used (because the alias\r\nis used). And that's bad for class inheritance.\r\n\r\n@ithinkihaveacat: Using externs is not working because the compiler complains about\r\nredefined stuff when the externs file has the same stuff in it as the source code to\r\nbe compiled. Maybe this was working with an earlier version of the Closure\r\nCompiler... And I think it is not correct anyway to define \"local\" stuff in an\r\nexterns file.\r\n\r\nI recommend implementing two annotations:\r\n\r\n1. @public annotation to mark symbols so they are NOT aliased at all. So this is the\r\nsame as using stringy-named properties everywhere. By the way: @protected symbols\r\nmust also not be aliased because third-party code may want to extend the method. Only\r\n@private symbols can always be aliased.\r\n\r\n2. @final annotation to mark symbols as final. This means that the compiler is\r\nallowed to create an alias for a symbol which is defined @public or @protected\r\nbecause it is not allowed to override this property anyway, so the alias is always\r\nstable.\r\n",
            "timestamp": 1268670989,
            "attachments": []
        },
        {
            "id": 6,
            "commenterId": 2197026629195026115,
            "content": "Comment deleted",
            "timestamp": 1277420918,
            "attachments": []
        },
        {
            "id": 7,
            "commenterId": -5060162230523776870,
            "content": "\"@public\" would never apply to functions within a closure as they are not accessible.  You are asking for something different.  The compiler has a capability (not currently exposed in the command-line) to name anonymous functions so that:\r\n\r\n _.Bar = function() {}\r\n\r\nbecomes something like:\r\n\r\n _.Bar = function $_Bar$() {}\r\n\r\nFor more complete stack traces.",
            "timestamp": 1277424058,
            "attachments": []
        },
        {
            "id": 8,
            "commenterId": 8868389048056362707,
            "content": "Just to exemplify a clear need for it, we're looking to use Closure Compiler for CKEditor. CKEditor exposes an extensive \"public\" API, partially (!) documented here:\r\nhttp://docs.cksource.com/ckeditor_api/\r\n\r\nWe would love to use the advanced mode, but considering that every publicly accessible name is aliased, we're forced to use the simple mode.\r\n\r\nThe following is the original code and the compiled code in advanced mode:\r\nhttp://nightly.ckeditor.com/latest/ckeditor/ckeditor.js\r\nhttp://closure-compiler.appspot.com/code/jsc29454f1b2fef93e2ea5ef525d3201d9b/default.js\r\n\r\nAt the very start of the code you can find the following:\r\nif(!window.CKEDITOR)window.CKEDITOR=...\r\n\r\n... which is compiled to:\r\nif(!window.lj)window.lj=\r\n\r\n... and the same for all CKEDITOR properties and methods.\r\n\r\nI think that the simple rule that everything that is publicly accessible should remain untouched is already a very good start for it. Then it's up to the developer to apply other tags to identify stuff that can be freely aliased.\r\n",
            "timestamp": 1301419509,
            "attachments": []
        },
        {
            "id": 9,
            "commenterId": -7699928860083865744,
            "content": "This is implemented as @expose\r\nhttps://developers.google.com/closure/compiler/docs/js-for-compiler\r\n",
            "timestamp": 1341710183,
            "attachments": []
        }
    ]
}