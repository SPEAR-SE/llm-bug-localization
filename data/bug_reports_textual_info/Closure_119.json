{
    "id": 1070,
    "status": "Fixed",
    "summary": "catch(e) yields JSC_UNDEFINED_NAME warning when e is used in catch in advanced mode",
    "labels": [
        "Type-Defect",
        "Priority-Low"
    ],
    "stars": 0,
    "commentCount": 9,
    "comments": [
        {
            "id": 0,
            "commenterId": -2907692606561795891,
            "content": "<b>What steps will reproduce the problem?</b>\n1. set closure for advanced compilation\r\n2. compile this:\r\n// ==ClosureCompiler==\r\n// @compilation_level ADVANCED_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// ==/ClosureCompiler==\r\n\r\ntry {\r\nvar x = 5;\r\n}\r\ncatch(e) {\r\nvar s = &quot;FAIL&quot; + e.name + &quot;: &quot;+ e.message;\r\n}\r\n\r\n<b>What is the expected output? What do you see instead?</b>\nI expect no warning or error for this.  Instead I see this:\r\n\r\nJSC_UNREACHABLE_CODE: unreachable code at line 4 character 0\r\ncatch(e) {\r\n^\r\nJSC_UNDEFINED_NAME: e is never defined at line 5 character 17\r\nvar s = &quot;FAIL&quot; + e.name + &quot;: &quot;+ e.message;\r\n                 ^\r\nJSC_UNDEFINED_NAME: e is never defined at line 5 character 32\r\nvar s = &quot;FAIL&quot; + e.name + &quot;: &quot;+ e.message;\r\n                                ^\r\nIn my case I'm especially complaining about the JSC_UNDEFINED_NAME warning...  Also it seems the unreachable complaint isn't right, but i'm not sure.\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\nI'm using this url: http://closure-compiler.appspot.com/home\r\nusing chrome browser on windows: Version 28.0.1500.95 m \r\n... but this is a server side error from what I see...\r\n\r\n<b>Please provide any additional information below.</b>",
            "timestamp": 1377120984,
            "attachments": []
        },
        {
            "id": 1,
            "commenterId": 4865484112040790759,
            "content": "Yeah, unfortunately the compiler doesn't model correctly variables introduced by a catch block.\r\n\r\nWe're currently in the process of rewriting the type inference algorithm and will fix this in the new algorithm. But it's not going to be ready for a couple more months.",
            "timestamp": 1377188232,
            "attachments": []
        },
        {
            "id": 2,
            "commenterId": -7699928860083865744,
            "content": "@dimvar: i think you're misreading the error. it's much simpler than that. I posted a fix here:\r\nhttp://codereview.appspot.com/12744050",
            "timestamp": 1377314041,
            "attachments": []
        },
        {
            "id": 3,
            "commenterId": -7699928860083865744,
            "content": "@jeffreygreenberg: the unreachable warning is correct, because \"var x = 5\" can't throw an error.",
            "timestamp": 1377314701,
            "attachments": []
        },
        {
            "id": 4,
            "commenterId": -7699928860083865744,
            "content": "This issue was closed by revision 046e0b226e96.",
            "timestamp": 1377535667,
            "attachments": []
        },
        {
            "id": 5,
            "commenterId": -7699928860083865744,
            "content": "This issue was closed by revision 046e0b226e96.",
            "timestamp": 1377535760,
            "attachments": []
        },
        {
            "id": 6,
            "commenterId": -2907692606561795891,
            "content": "That can't be correct as the a catch can never occur... This is simplified code and the point is to catch an error should I do a programming error... It may be correct now but in the future I might screw it up.., the code is semantically correct and hence the compiler should allow it, not reject it.\r\n\r\nI hope you've closed it because you fixed it, not because you're saying an unreachable warning is correct. Feel free to make the line \"var x = 5;\" to instead call a function which will throw an error... That would be semantically equivalent to the case you are ignoring.\r\n",
            "timestamp": 1377536661,
            "attachments": []
        },
        {
            "id": 7,
            "commenterId": 8173196008570380122,
            "content": "As Nick mentioned, the JSC_UNREACHABLE_CODE is correct because the compiler knows that \"var x = 5;\" can never through an error. More complex code CAN throw an error and does not produce that warning. Take the following example:\r\n\r\n// ==ClosureCompiler==\r\n// @compilation_level ADVANCED_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// ==/ClosureCompiler==\r\n\r\ntry {\r\n //Any of the following compile without warning\r\n //throw new Error(\"custom error\");\r\n //document.getElementById('DoesNotExist').innerHTML = 'foo';\r\n window['MyExternalFunction']();\r\n}\r\ncatch(e) {\r\nvar s = \"FAIL\" + e.name + \": \"+ e.message;\r\n}\r\n",
            "timestamp": 1377609536,
            "attachments": []
        },
        {
            "id": 8,
            "commenterId": -7699928860083865744,
            "content": "This issue was closed by revision 046e0b226e96.",
            "timestamp": 1381947630,
            "attachments": []
        }
    ]
}